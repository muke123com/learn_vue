<template>
    <div class="canvas-box" id="canvas-box">
        <div>
            <input type="text" v-model="text" />
        </div>
        <canvas id="canvas"></canvas>
    </div>
</template>
<script>
    let canvas, ctx;
    export default {
        data(){
            return {
                text: "测试"
            }
        },
        watch: {
            text(){
                this.textToImage();
            }
        },
        mounted(){
            canvas = document.getElementById("canvas");
            canvas.width = 800;
            canvas.height = 640;
            ctx = canvas.getContext("2d");

        },
        methods: {
            textToImage(){
                let _this = this;
                let fontSize = 30;
                let text_canvas = document.createElement('canvas');
                let text_ctx = text_canvas.getContext("2d");

                text_canvas.id = 'text_canvas';
                text_canvas.height = fontSize;
                text_ctx.font = fontSize + "px Consolas";
                text_canvas.width = text_ctx.measureText(_this.text).width;
                text_ctx.font = fontSize + "px Consolas";
                text_ctx.fillStyle = "#ff4200";
                ctx.clearRect(0,0,canvas.width,canvas.height);
                text_ctx.fillText(_this.text, 0, fontSize/5*4);
                this.getImagedata(text_canvas, text_ctx);
            },
            // 获取imageData
            getImagedata(text_canvas, text_ctx) {
                let _this = this;
                let img = new Image();
                img.src = text_canvas.toDataURL("image/jpeg");
                img.onload = function () {
                    let imgData = text_ctx.getImageData(0,0,this.width,this.height);
                    let imgDataList = [];
                    let dataLength = imgData.data.length;

                    for(let i=0;i<dataLength;i+=4){
                        let r = imgData.data[i];
                        let g = imgData.data[i + 1];
                        let b = imgData.data[i + 2];
                        let item;
                        if(r<10 && g<10 && b<10){
                            item = {
                                color: "#fff",
                                radius: 3,
                                type: false
                            }
                        }else{
                            item = {
                                color: "rgba("+r+","+g+","+b+")",
                                radius: 3,
                                type: true
                            }
                        }
                        imgDataList.push(item);
                    }

                    imgDataList = _this.getTwoDimensionalArray(imgDataList, img.width);

                    _this.drawText(imgDataList, img);
                }
            },
            // 整理成二维数组
            getTwoDimensionalArray(imgDataList, width){
                let arr_out = [];
                let arr_in = [];
                let x = 0,y = 0;
                imgDataList.map(function (item) {
                    item['x'] = x;
                    item['y'] = y;
                    arr_in.push(item);
                    x++;
                    if(arr_in.length >= width) {
                        arr_out.push(arr_in);
                        arr_in = [];
                        x=0;
                        y++
                    }
                });
                return arr_out;
            },
            drawText(imgDataList, img){
                let spacing = 4;
                for(let i=0;i<imgDataList.length;i++){
                    for(let j=0;j<imgDataList[i].length;j++){
                        let p = new Point(imgDataList[i][j]);
                        p.draw(ctx);
                    }
                }
            }
        }
    }
    class Point {
        constructor(option){
            this.x = option.x;
            this.y = option.y;
            this.radius = 1;
            this.color = option.color;
        }
        draw(ctx){
            let x,y;
            x = this.x*3 + 50;
            y = this.y*3 + 50;
            ctx.beginPath();
            ctx.arc(x,y,this.radius,0,Math.PI*2);
            ctx.fillStyle = this.color;
            ctx.fill()
        }
    }
</script>